pub mod bfs;

pub trait Solution {
    fn maximum_minutes(grid: Vec<Vec<i32>>) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;
    use crate::test_utilities::Matrix;

    pub fn run<S: Solution>() {
        let test_cases = [
            (
                &[
                    [0, 2, 0, 0, 0, 0, 0],
                    [0, 0, 0, 2, 2, 1, 0],
                    [0, 2, 0, 0, 1, 2, 0],
                    [0, 0, 2, 2, 2, 0, 2],
                    [0, 0, 0, 0, 0, 0, 0],
                ] as &dyn Matrix<_>,
                3,
            ),
            (&[[0, 0, 0, 0], [0, 1, 2, 0], [0, 2, 0, 0]], -1),
            (&[[0, 0, 0], [2, 2, 0], [1, 2, 0]], 1_000_000_000),
            (&[[0, 1], [0, 0]], -1),
            (&[[0, 2, 1, 1, 0], [1, 2, 0, 0, 1], [2, 2, 1, 1, 0]], -1),
            (
                &[
                    [0, 2, 0, 0, 1],
                    [0, 2, 0, 2, 2],
                    [0, 2, 0, 0, 0],
                    [0, 0, 2, 2, 0],
                    [0, 0, 0, 0, 0],
                ],
                0,
            ),
            (
                &[
                    [0, 2, 0, 0, 0, 0, 0],
                    [0, 0, 0, 2, 2, 1, 0],
                    [0, 2, 0, 0, 1, 2, 0],
                    [0, 0, 2, 2, 2, 0, 2],
                    [0, 0, 0, 0, 0, 0, 0],
                ],
                3,
            ),
            (&[[0, 0], [1, 0]], -1),
            (&[[0, 1, 0, 0, 0], [0, 0, 2, 0, 0], [0, 0, 0, 0, 0]], -1),
        ];

        for (grid, expected) in test_cases {
            assert_eq!(S::maximum_minutes(grid.to_vec()), expected);
        }
    }
}
