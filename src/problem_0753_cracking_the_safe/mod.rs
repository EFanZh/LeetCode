pub mod dfs;
pub mod iterative;
pub mod recursive;

pub trait Solution {
    fn crack_safe(n: i32, k: i32) -> String;
}

#[cfg(test)]
mod tests {
    use super::Solution;
    use std::str;

    pub fn run<S: Solution>() {
        let test_cases = [
            ((1, 1), &["0"] as &[_]),
            ((1, 2), &["0", "1"]),
            ((1, 3), &["0", "1", "2"]),
            ((2, 1), &["00"]),
            ((2, 2), &["00", "01", "10", "11"]),
            ((2, 3), &["00", "01", "02", "10", "11", "12", "20", "21", "22"]),
            ((3, 1), &["000"]),
            ((3, 2), &["000", "001", "010", "011", "100", "101", "110", "111"]),
            (
                (3, 3),
                &[
                    "000", "001", "002", "010", "011", "012", "020", "021", "022", "100", "101", "102", "110", "111",
                    "112", "120", "121", "122", "200", "201", "202", "210", "211", "212", "220", "221", "222",
                ],
            ),
            ((4, 1), &["0000"]),
            (
                (4, 2),
                &[
                    "0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011",
                    "1100", "1101", "1110", "1111",
                ],
            ),
            (
                (4, 3),
                &[
                    "0000", "0001", "0002", "0010", "0011", "0012", "0020", "0021", "0022", "0100", "0101", "0102",
                    "0110", "0111", "0112", "0120", "0121", "0122", "0200", "0201", "0202", "0210", "0211", "0212",
                    "0220", "0221", "0222", "1000", "1001", "1002", "1010", "1011", "1012", "1020", "1021", "1022",
                    "1100", "1101", "1102", "1110", "1111", "1112", "1120", "1121", "1122", "1200", "1201", "1202",
                    "1210", "1211", "1212", "1220", "1221", "1222", "2000", "2001", "2002", "2010", "2011", "2012",
                    "2020", "2021", "2022", "2100", "2101", "2102", "2110", "2111", "2112", "2120", "2121", "2122",
                    "2200", "2201", "2202", "2210", "2211", "2212", "2220", "2221", "2222",
                ],
            ),
        ];

        for ((n, k), expected) in test_cases {
            let result = S::crack_safe(n, k);

            let mut result = result
                .as_bytes()
                .windows(n as _)
                .map(|window| str::from_utf8(window).unwrap())
                .collect::<Vec<_>>();

            result.sort_unstable();

            assert_eq!(result, expected);
        }
    }
}
