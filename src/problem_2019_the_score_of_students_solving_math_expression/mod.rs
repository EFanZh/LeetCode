pub mod dynamic_programming;

pub trait Solution {
    fn score_of_students(s: String, answers: Vec<i32>) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            (("7+3*1*2", &[20, 13, 42] as &[_]), 7),
            (("3+5*2", &[13, 0, 10, 13, 13, 16, 16]), 19),
            (("6+0*1", &[12, 9, 6, 4, 8, 6]), 10),
            (
                (
                    "6+3*6+2*9+9*4+9*9+5*9+6",
                    &[
                        512, 210, 210, 594, 210, 875, 762, 210, 210, 270, 342, 330, 210, 168, 767, 22, 462, 634, 194,
                        210, 552, 210, 210, 384, 210, 348, 210, 267, 553, 139, 210, 389, 614, 210, 825, 234, 900, 435,
                        210, 699, 454, 504, 300, 210, 210, 210, 215, 984, 210, 522, 943, 654, 793, 714, 870, 693, 210,
                        686, 210, 720, 153, 210, 957, 510, 210, 810, 210, 846, 714, 528, 942, 210, 342, 974, 210, 71,
                        906, 402, 726, 924, 388, 696, 210, 366, 210, 888, 825, 210, 210, 210, 654, 996, 846, 559, 210,
                        492, 210, 698, 210, 856, 576, 324, 822, 894, 666, 210, 935, 210, 840, 45, 641, 210, 210, 588,
                        708, 966, 462, 300, 210, 759, 480, 210,
                    ],
                ),
                291,
            ),
        ];

        for ((s, answers), expected) in test_cases {
            assert_eq!(S::score_of_students(s.to_string(), answers.to_vec()), expected);
        }
    }
}
