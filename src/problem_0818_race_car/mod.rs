pub mod bfs;
pub mod dynamic_programming;

pub trait Solution {
    fn racecar(target: i32) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            (1, 1),
            (2, 4),
            (3, 2),
            (4, 5),
            (5, 7),
            (6, 5),
            (7, 3),
            (8, 6),
            (9, 8),
            (10, 7),
            (11, 10),
            (12, 7),
            (13, 9),
            (14, 6),
            (15, 4),
            (16, 7),
            (17, 9),
            (18, 8),
            (19, 11),
            (20, 12),
            (21, 10),
            (22, 9),
            (23, 12),
            (24, 9),
            (25, 11),
            (26, 13),
            (27, 11),
            (28, 8),
            (29, 10),
            (30, 7),
            (31, 5),
            (32, 8),
            (33, 10),
            (34, 9),
            (35, 12),
            (36, 13),
            (37, 11),
            (38, 10),
            (39, 13),
            (40, 15),
            (41, 14),
            (42, 15),
            (43, 13),
            (44, 14),
            (45, 12),
            (46, 11),
            (47, 14),
            (48, 11),
            (49, 13),
            (50, 16),
            (51, 14),
            (52, 17),
            (53, 14),
            (54, 15),
            (55, 13),
            (56, 10),
            (57, 12),
            (58, 14),
            (59, 12),
            (60, 9),
            (61, 11),
            (62, 8),
            (63, 6),
            (64, 9),
            (65, 11),
            (66, 10),
            (67, 13),
            (68, 14),
            (69, 12),
            (70, 11),
            (71, 14),
            (72, 16),
            (73, 15),
            (74, 16),
            (75, 14),
            (76, 15),
            (77, 13),
            (78, 12),
            (79, 15),
            (80, 17),
            (81, 16),
            (82, 19),
            (83, 19),
            (84, 18),
            (85, 17),
            (86, 18),
            (87, 16),
            (88, 18),
            (89, 18),
            (90, 17),
            (91, 15),
            (92, 16),
            (93, 14),
            (94, 13),
            (95, 16),
        ];

        for (target, expected) in test_cases {
            assert_eq!(S::racecar(target), expected);
        }
    }
}
