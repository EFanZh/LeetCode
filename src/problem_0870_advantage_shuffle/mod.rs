pub mod sort_and_merge;

pub trait Solution {
    fn advantage_count(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32>;
}

#[cfg(test)]
mod tests {
    use super::Solution;
    use crate::test_utilities;

    pub fn run<S: Solution>() {
        let test_cases = [
            ((&[2, 7, 11, 15] as &[_], &[1, 10, 4, 11] as &[_]), 4),
            ((&[12, 24, 8, 32], &[13, 25, 32, 11]), 3),
            (
                (
                    &[798_463_031, 954_792_861, 406_138_122, 95_873_268, 505_167_177],
                    &[798_463_031, 505_167_177, 416_718_209, 184_854_491, 607_500_836],
                ),
                4,
            ),
            (
                (
                    &[
                        732_715_785,
                        14_322_700,
                        916_833_726,
                        421_998_099,
                        412_723_040,
                        389_760_596,
                        392_367_128,
                        229_875_646,
                        92_698_395,
                        620_677_561,
                    ],
                    &[
                        155_522_515,
                        751_104_291,
                        732_715_785,
                        620_677_561,
                        642_388_367,
                        14_322_700,
                        421_998_099,
                        830_018_902,
                        916_833_726,
                        229_875_646,
                    ],
                ),
                6,
            ),
            (
                (
                    &[3_451, 9_210, 6_762, 6_256, 9_339, 306, 6_025, 1_879, 3_969, 1_818],
                    &[3_491, 9_014, 7_254, 8_463, 754, 3_008, 7_842, 404, 1_897, 818],
                ),
                8,
            ),
            (
                (
                    &[718_967_141, 189_971_378, 341_560_426, 23_521_218, 339_517_772],
                    &[967_482_459, 978_798_455, 744_530_040, 3_454_610, 940_238_504],
                ),
                1,
            ),
        ];

        for ((nums1, nums2), expected) in test_cases {
            let mut result = S::advantage_count(nums1.to_vec(), nums2.to_vec());

            assert_eq!(
                result.iter().zip(nums2).filter(|(lhs, rhs)| lhs > rhs).count(),
                expected
            );

            result.sort_unstable();

            assert_eq!(result, test_utilities::unstable_sorted(nums1.iter().copied()));
        }
    }
}
