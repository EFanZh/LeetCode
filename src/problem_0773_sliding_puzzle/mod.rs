pub mod bidirectional_bfs;

pub trait Solution {
    fn sliding_puzzle(board: Vec<Vec<i32>>) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            ([[0, 2, 3], [1, 4, 5]], 3),
            ([[0, 5, 1], [2, 3, 4]], 17),
            ([[0, 5, 4], [2, 1, 3]], 11),
            ([[1, 0, 2], [4, 3, 5]], -1),
            ([[1, 0, 2], [4, 5, 3]], 2),
            ([[1, 2, 0], [4, 5, 3]], 1),
            ([[1, 2, 3], [0, 4, 5]], 2),
            ([[1, 2, 3], [4, 0, 5]], 1),
            ([[1, 2, 3], [4, 5, 0]], 0),
            ([[1, 2, 3], [5, 4, 0]], -1),
            ([[2, 0, 3], [1, 4, 5]], 4),
            ([[2, 0, 4], [1, 5, 3]], 8),
            ([[2, 4, 0], [1, 5, 3]], 7),
            ([[2, 4, 3], [1, 0, 5]], 5),
            ([[2, 4, 3], [1, 5, 0]], 6),
            ([[2, 5, 4], [0, 1, 3]], 10),
            ([[2, 5, 4], [1, 0, 3]], 9),
            ([[3, 2, 4], [1, 5, 0]], 14),
            ([[4, 0, 3], [1, 5, 2]], 18),
            ([[4, 1, 2], [5, 0, 3]], 5),
            ([[4, 3, 0], [1, 5, 2]], 19),
            ([[4, 5, 0], [1, 2, 3]], 21),
            ([[4, 5, 3], [1, 2, 0]], 20),
            ([[5, 0, 1], [2, 3, 4]], 16),
            ([[5, 0, 4], [2, 1, 3]], 12),
            ([[5, 1, 0], [2, 3, 4]], 15),
            ([[5, 1, 4], [2, 0, 3]], 13),
            ([[5, 1, 4], [2, 3, 0]], 14),
            ([[5, 3, 1], [2, 0, 4]], 17),
        ];

        for (board, expected) in test_cases {
            assert_eq!(S::sliding_puzzle(board.map(Vec::from).into()), expected);
        }
    }
}
