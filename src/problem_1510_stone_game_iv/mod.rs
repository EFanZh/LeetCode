pub mod memoized_dynamic_programming;

pub trait Solution {
    fn winner_square_game(n: i32) -> bool;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            (1, true),
            (2, false),
            (3, true),
            (4, true),
            (5, false),
            (6, true),
            (7, false),
            (8, true),
            (9, true),
            (10, false),
            (11, true),
            (12, false),
            (13, true),
            (14, true),
            (15, false),
            (16, true),
            (17, false),
            (18, true),
            (19, true),
            (20, false),
            (21, true),
            (22, false),
            (23, true),
            (24, true),
            (25, true),
            (26, true),
            (27, true),
            (28, true),
            (29, true),
            (30, true),
            (31, true),
            (32, true),
            (33, true),
            (34, false),
            (35, true),
            (36, true),
            (37, true),
            (38, true),
            (39, false),
            (40, true),
            (41, true),
            (42, true),
            (43, true),
            (44, false),
            (45, true),
            (46, true),
            (47, true),
            (48, true),
            (49, true),
            (50, true),
            (51, true),
            (52, false),
            (53, true),
            (54, true),
            (55, true),
            (56, true),
            (57, false),
            (58, true),
            (59, true),
            (60, true),
            (61, true),
            (62, false),
            (63, true),
            (64, true),
            (65, false),
            (66, true),
            (67, false),
            (68, true),
            (69, true),
            (70, true),
            (71, true),
            (72, false),
            (73, true),
            (74, true),
            (75, true),
            (76, true),
            (77, true),
            (78, true),
            (79, true),
            (80, true),
            (81, true),
            (82, true),
            (83, true),
            (84, true),
            (85, false),
            (86, true),
            (87, true),
            (88, true),
            (89, true),
            (90, true),
            (91, true),
            (92, true),
            (93, true),
            (94, true),
            (95, false),
        ];

        for (n, expected) in test_cases {
            assert_eq!(S::winner_square_game(n), expected);
        }
    }
}
