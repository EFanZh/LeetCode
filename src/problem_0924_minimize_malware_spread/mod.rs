pub mod bfs;

pub trait Solution {
    fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;
    use crate::test_utilities::Matrix;

    pub fn run<S: Solution>() {
        let test_cases = [
            (
                (&[[1, 1, 0], [1, 1, 0], [0, 0, 1]] as &dyn Matrix<_>, &[0, 1] as &[_]),
                0,
            ),
            ((&[[1, 0, 0], [0, 1, 0], [0, 0, 1]], &[0, 2]), 0),
            ((&[[1, 1, 1], [1, 1, 1], [1, 1, 1]], &[1, 2]), 1),
            (
                (
                    &[
                        [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
                        [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
                        [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0],
                        [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
                        [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0],
                        [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                        [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                    ],
                    &[7, 8, 6, 2, 3],
                ),
                2,
            ),
        ];

        for ((graph, initial), expected) in test_cases {
            assert_eq!(S::min_malware_spread(graph.to_vec(), initial.to_vec()), expected);
        }
    }
}
