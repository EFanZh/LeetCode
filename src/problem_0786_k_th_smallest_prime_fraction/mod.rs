pub mod divide_and_conquer;

pub trait Solution {
    fn kth_smallest_prime_fraction(arr: Vec<i32>, k: i32) -> Vec<i32>;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            ((&[1, 2, 3, 5] as &[_], 3), [2, 5]),
            ((&[1, 7], 1), [1, 7]),
            ((&[1, 13, 17, 59], 6), [13, 17]),
            ((&[1, 7, 23, 29, 47], 8), [23, 47]),
            (
                (
                    &[
                        1, 79, 1447, 1663, 3313, 3803, 4019, 5051, 5153, 5659, 6473, 6733, 6791, 6833, 7121, 9341,
                        10883, 11197, 12373, 12583, 12821, 13339, 13487, 13613, 13799, 13913, 15107, 15461, 15733,
                        15901, 16067, 16519, 17099, 17911, 18353, 18757, 18913, 19319, 19777, 20533, 21379, 21503,
                        21523, 21911, 24043, 25237, 25997, 27581, 28229, 28597,
                    ],
                    1044,
                ),
                [21503, 25237],
            ),
            (
                (
                    &[
                        1, 419, 1459, 1913, 4259, 7451, 7549, 8521, 8893, 9689, 11173, 11519, 13367, 14813, 15121,
                        17569, 18311, 19861, 27653, 28307,
                    ],
                    28,
                ),
                [419, 11519],
            ),
            (
                (
                    &[
                        1, 59, 347, 1087, 1693, 4001, 4451, 8609, 12107, 17209, 17351, 17659, 17957, 21493, 23357,
                        24373, 24733, 26687, 27739, 28099,
                    ],
                    24,
                ),
                [59, 21493],
            ),
            ((&[1, 2, 5], 2), [2, 5]),
            ((&[1, 23, 79, 103, 127, 139, 251], 21), [127, 139]),
            ((&[1, 37, 43, 263], 5), [43, 263]),
            ((&[1, 2, 37, 79, 89, 109, 113, 229, 271], 13), [1, 37]),
        ];

        for ((arr, k), expected) in test_cases {
            assert_eq!(S::kth_smallest_prime_fraction(arr.to_vec(), k), expected);
        }
    }
}
