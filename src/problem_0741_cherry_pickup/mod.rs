pub mod dynamic_programming;

pub trait Solution {
    fn cherry_pickup(grid: Vec<Vec<i32>>) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            (&[&[0, 1, -1] as &[_], &[1, 0, -1], &[1, 1, 1]] as &[&[_]], 5),
            (&[&[1, 1, -1], &[1, -1, 1], &[-1, 1, 1]], 0),
            (&[&[1]], 1),
            (
                &[
                    &[1, -1, 1, -1, 1, 1, 1, 1, 1, -1],
                    &[-1, 1, 1, -1, -1, 1, 1, 1, 1, 1],
                    &[1, 1, 1, -1, 1, 1, 1, 1, 1, 1],
                    &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    &[-1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    &[1, -1, 1, 1, 1, 1, -1, 1, 1, 1],
                    &[1, 1, 1, -1, 1, 1, -1, 1, 1, 1],
                    &[1, -1, 1, -1, -1, 1, 1, 1, 1, 1],
                    &[1, 1, -1, -1, 1, 1, 1, -1, 1, -1],
                    &[1, 1, -1, 1, 1, 1, 1, 1, 1, 1],
                ],
                0,
            ),
            (&[&[-1, 1], &[1, 1]], 0),
            (
                &[
                    &[1, -1, -1, -1, -1],
                    &[1, 0, 1, -1, -1],
                    &[0, -1, 1, 0, 1],
                    &[1, 0, 1, 1, 0],
                    &[-1, -1, -1, 1, 1],
                ],
                10,
            ),
        ];

        for (grid, expected) in test_cases {
            assert_eq!(
                S::cherry_pickup(grid.iter().copied().map(<[_]>::to_vec).collect()),
                expected
            );
        }
    }
}
