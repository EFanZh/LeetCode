pub mod greedy;

pub trait Solution {
    fn smallest_subarrays(nums: Vec<i32>) -> Vec<i32>;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            (&[1, 0, 2, 1, 3] as &[_], &[3, 3, 2, 2, 1] as &[_]),
            (&[1, 2], &[2, 1]),
            (&[0], &[1]),
            (&[1_000_000_000], &[1]),
            (
                &[
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 2, 0, 0, 0, 0, 0, 0, 28, 16, 32, 0, 0, 0, 0,
                    0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 2, 0, 0,
                    32, 0, 0, 0, 4, 16, 0, 4, 0, 32, 0, 0, 8, 0, 1, 1, 0, 0, 0, 0, 0,
                ],
                &[
                    36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 43, 42, 41, 40, 39, 38,
                    37, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30,
                    29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4,
                    3, 2, 1, 1, 1, 1, 1, 1, 1,
                ],
            ),
        ];

        for (nums, expected) in test_cases {
            assert_eq!(S::smallest_subarrays(nums.to_vec()), expected);
        }
    }
}
