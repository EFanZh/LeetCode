pub mod dynamic_programming;
pub mod memoized_dynamic_programming;

pub trait Solution {
    fn number_ways(hats: Vec<Vec<i32>>) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            (&[&[3, 4] as &[_], &[4, 5], &[5]] as &[&[_]], 1),
            (&[&[3, 5, 1], &[3, 5]], 4),
            (&[&[1, 2, 3, 4], &[1, 2, 3, 4], &[1, 2, 3, 4], &[1, 2, 3, 4]], 24),
            (
                &[
                    &[1, 3, 5, 10, 12, 13, 14, 15, 16, 18, 19, 20, 21, 27, 34, 35, 38, 39, 40],
                    &[
                        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27,
                        28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                    ],
                    &[3, 7, 10, 12, 13, 14, 15, 17, 21, 25, 29, 31, 35, 40],
                    &[
                        2, 3, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 28, 29, 32, 33, 34, 35, 36, 38,
                    ],
                    &[6, 12, 17, 20, 22, 26, 28, 30, 31, 32, 34, 35],
                    &[1, 4, 6, 7, 12, 13, 14, 15, 21, 22, 27, 28, 30, 31, 32, 35, 37, 38, 40],
                    &[6, 12, 21, 25, 38],
                    &[
                        1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
                        29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40,
                    ],
                ],
                842_465_346,
            ),
        ];

        for (hats, expected) in test_cases {
            assert_eq!(S::number_ways(hats.iter().copied().map(Vec::from).collect()), expected);
        }
    }
}
