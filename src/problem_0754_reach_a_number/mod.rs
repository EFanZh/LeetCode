pub mod mathematical;

pub trait Solution {
    fn reach_number(target: i32) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        // https://oeis.org/A140358.
        let test_cases = [
            (-10, 4),
            (-9, 5),
            (-8, 4),
            (-7, 5),
            (-6, 3),
            (-5, 5),
            (-4, 3),
            (-3, 2),
            (-2, 3),
            (-1, 1),
            (0, 0),
            (1, 1),
            (2, 3),
            (3, 2),
            (4, 3),
            (5, 5),
            (6, 3),
            (7, 5),
            (8, 4),
            (9, 5),
            (10, 4),
            (11, 5),
            (12, 7),
            (13, 5),
            (14, 7),
            (15, 5),
            (16, 7),
            (17, 6),
            (18, 7),
            (19, 6),
            (20, 7),
            (21, 6),
            (22, 7),
            (23, 9),
            (24, 7),
            (25, 9),
            (26, 7),
            (27, 9),
            (28, 7),
            (29, 9),
            (30, 8),
            (31, 9),
            (32, 8),
            (33, 9),
            (34, 8),
            (35, 9),
            (36, 8),
            (37, 9),
            (38, 11),
            (39, 9),
            (40, 11),
            (41, 9),
            (42, 11),
            (43, 9),
            (44, 11),
            (45, 9),
            (46, 11),
            (47, 10),
            (48, 11),
            (49, 10),
            (50, 11),
            (51, 10),
            (52, 11),
            (53, 10),
            (54, 11),
            (55, 10),
            (56, 11),
            (57, 13),
            (58, 11),
            (59, 13),
            (60, 11),
            (61, 13),
            (62, 11),
            (63, 13),
            (64, 11),
            (65, 13),
            (66, 11),
            (67, 13),
            (68, 12),
            (69, 13),
            (70, 12),
            (71, 13),
            (72, 12),
            (73, 13),
            (74, 12),
            (75, 13),
            (76, 12),
            (77, 13),
            (78, 12),
            (79, 13),
            (80, 15),
            (81, 13),
            (82, 15),
            (83, 13),
            (84, 15),
        ];

        for (target, expected) in test_cases {
            assert_eq!(S::reach_number(target), expected);
        }
    }
}
