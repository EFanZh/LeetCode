pub mod bfs;
pub mod bfs_2;
pub mod binary_search;
pub mod binary_search_2;
pub mod binary_search_3;

pub trait Solution {
    fn kth_smallest(matrix: Vec<Vec<i32>>, k: i32) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            ((&[&[1, 5, 9] as &[_], &[10, 11, 13], &[12, 13, 15]] as &[&[_]], 1), 1),
            ((&[&[1, 5, 9], &[10, 11, 13], &[12, 13, 15]], 2), 5),
            ((&[&[1, 5, 9], &[10, 11, 13], &[12, 13, 15]], 3), 9),
            ((&[&[1, 5, 9], &[10, 11, 13], &[12, 13, 15]], 4), 10),
            ((&[&[1, 5, 9], &[10, 11, 13], &[12, 13, 15]], 5), 11),
            ((&[&[1, 5, 9], &[10, 11, 13], &[12, 13, 15]], 6), 12),
            ((&[&[1, 5, 9], &[10, 11, 13], &[12, 13, 15]], 7), 13),
            ((&[&[1, 5, 9], &[10, 11, 13], &[12, 13, 15]], 8), 13),
            ((&[&[1, 5, 9], &[10, 11, 13], &[12, 13, 15]], 9), 15),
            (
                (
                    &[
                        &[1, 4, 7, 11, 15],
                        &[2, 5, 8, 12, 19],
                        &[3, 6, 9, 16, 22],
                        &[10, 13, 14, 17, 24],
                        &[18, 21, 23, 26, 30],
                    ],
                    5,
                ),
                5,
            ),
            (
                (
                    &[
                        &[1, 1, 3, 8, 13],
                        &[4, 4, 4, 8, 18],
                        &[9, 14, 18, 19, 20],
                        &[14, 19, 23, 25, 25],
                        &[18, 21, 26, 28, 29],
                    ],
                    13,
                ),
                18,
            ),
            ((&[&[-5]], 1), -5),
            ((&[&[2, 3], &[5, 7]], 1), 2),
            ((&[&[2, 3], &[5, 7]], 2), 3),
            ((&[&[2, 3], &[5, 7]], 3), 5),
            ((&[&[2, 3], &[5, 7]], 4), 7),
        ];

        for ((matrix, k), expected) in test_cases {
            assert_eq!(
                S::kth_smallest(matrix.iter().copied().map(<[_]>::to_vec).collect(), k),
                expected
            );
        }
    }
}
