pub mod greedy;
pub mod state_matchine;
pub mod tail_recursive;

pub trait Solution {
    fn max_sum(nums1: Vec<i32>, nums2: Vec<i32>) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            ((&[2, 4, 5, 8, 10] as &[_], &[4, 6, 8, 9] as &[_]), 30),
            ((&[1, 3, 5, 7, 9], &[3, 5, 100]), 109),
            ((&[1, 2, 3, 4, 5], &[6, 7, 8, 9, 10]), 40),
            ((&[1, 4, 5, 6, 12, 14], &[10, 13, 16, 21, 27]), 87),
            ((&[5, 9, 11, 15, 17, 25, 29], &[6, 12, 15]), 111),
            ((&[5, 8, 14, 19, 25, 26, 34], &[8, 10, 18]), 131),
            (
                (
                    &[
                        4, 20, 33, 43, 47, 52, 54, 72, 75, 87, 91, 102, 105, 118, 123, 128, 140, 141, 143, 163, 175,
                        187, 206, 207, 210, 229, 245, 265, 281, 292, 303, 318, 321, 334, 353, 356, 358, 363, 365, 369,
                        379, 395, 408,
                    ],
                    &[
                        8, 10, 13, 28, 29, 40, 41, 52, 70, 86, 97, 108, 124, 137, 138, 155, 158, 161, 173, 178, 197,
                        207, 222, 224, 225, 236, 240, 241, 242, 246, 259, 277, 278, 297, 308, 325, 339, 359, 364, 382,
                        393, 407, 408, 428, 442, 459, 464, 466,
                    ],
                ),
                11_069,
            ),
        ];

        for ((nums1, nums2), expected) in test_cases {
            assert_eq!(S::max_sum(nums1.to_vec(), nums2.to_vec()), expected);
        }
    }
}
