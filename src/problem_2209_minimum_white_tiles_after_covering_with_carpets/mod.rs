pub mod dynamic_programming;

pub trait Solution {
    fn minimum_white_tiles(floor: String, num_carpets: i32, carpet_len: i32) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        let test_cases = [
            (("10110101", 2, 2), 2),
            (("11111", 2, 3), 0),
            (("110000", 1, 1), 1),
            (("0111101", 1, 2), 3),
            (("1", 1, 1), 0),
            (("0000", 1, 1), 0),
            (
                ("1000000000001000000100111100001101111000000001001111110000000000", 6, 4),
                3,
            ),
            (
                (

                    197,
                    346,
                ),
                0,
            ),
        ];

        for ((floor, num_carpets, carpet_len), expected) in test_cases {
            assert_eq!(
                S::minimum_white_tiles(floor.to_string(), num_carpets, carpet_len),
                expected,
            );
        }
    }
}
