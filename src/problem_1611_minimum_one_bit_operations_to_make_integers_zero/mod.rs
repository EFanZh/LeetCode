pub mod gray_code;

pub trait Solution {
    fn minimum_one_bit_operations(n: i32) -> i32;
}

#[cfg(test)]
mod tests {
    use super::Solution;

    pub fn run<S: Solution>() {
        // See <https://oeis.org/A006068>.
        let test_cases = [
            (0, 0),
            (1, 1),
            (2, 3),
            (3, 2),
            (4, 7),
            (5, 6),
            (6, 4),
            (7, 5),
            (8, 15),
            (9, 14),
            (10, 12),
            (11, 13),
            (12, 8),
            (13, 9),
            (14, 11),
            (15, 10),
            (16, 31),
            (17, 30),
            (18, 28),
            (19, 29),
            (20, 24),
            (21, 25),
            (22, 27),
            (23, 26),
            (24, 16),
            (25, 17),
            (26, 19),
            (27, 18),
            (28, 23),
            (29, 22),
            (30, 20),
            (31, 21),
            (32, 63),
            (33, 62),
            (34, 60),
            (35, 61),
            (36, 56),
            (37, 57),
            (38, 59),
            (39, 58),
            (40, 48),
            (41, 49),
            (42, 51),
            (43, 50),
            (44, 55),
            (45, 54),
            (46, 52),
            (47, 53),
            (48, 32),
            (49, 33),
            (50, 35),
            (51, 34),
            (52, 39),
            (53, 38),
            (54, 36),
            (55, 37),
            (56, 47),
            (57, 46),
            (58, 44),
            (59, 45),
            (60, 40),
            (61, 41),
            (62, 43),
            (63, 42),
            (64, 127),
            (65, 126),
            (66, 124),
            (67, 125),
            (68, 120),
            (69, 121),
        ];

        for (n, expected) in test_cases {
            assert_eq!(S::minimum_one_bit_operations(n), expected);
        }
    }
}
